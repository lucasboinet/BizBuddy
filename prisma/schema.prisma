// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(cuid())
  firstname String
  lastname  String
  email     String @unique

  password     String
  refreshToken String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]
  settings  Setting?
  boards    Board[]
}

model Customer {
  id      String  @id @default(cuid())
  name    String
  email   String
  phone   String?
  address Json    @default("{}")
  siret   String

  accountId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]
  invoices  Invoice[]
}

model Project {
  id          String @id @default(cuid())
  name        String
  description String @default("Project short description to summarize what actions are to be taken")

  userId      String    @default("")
  customerId  String
  status      String
  startedAt   DateTime?
  completedAt DateTime?
  dueAt       DateTime  @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  tags ProjectTag[]

  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  board      Board?
  // files    File[]
  invoices   Invoice[]
  activities Activity[]
}

model Invoice {
  id   String @id
  name String

  customerId String
  projectId  String?
  status     String
  amount     Float
  vat        Int      @default(0)
  items      Json     @default("[]")
  dueDate    DateTime
  note       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project  Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Tag {
  id     String @id @default(cuid())
  name   String @unique
  userId String

  ProjectTag ProjectTag[]
}

model ProjectTag {
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String

  @@id([projectId, tagId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Setting {
  id     String @id @default(cuid())
  userId String @unique

  address Json?
  siret   String?

  iban String?
  bic  String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Board {
  id        String @id @default(cuid())
  userId    String
  projectId String @unique
  tasks     Task[]

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Task {
  id      String @id @default(cuid())
  boardId String

  columnId    String
  name        String
  description String
  todos       Json   @default("[]")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
  dueAt       DateTime  @default(now())
  priority    String    @default("LOW")

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

model Activity {
  id        String @id @default(cuid())
  projectId String

  type      String
  label     String
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// model File {
//   id String @id @default(cuid())

//   projectId String
//   name      String
//   url       String

//   project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
// }
